/****************************************************************************
Copyright (C) Cambridge Silicon Radio Limited 2013-2014
Part of ADK 3.5

FILE NAME
    sink_input_manager.h

DESCRIPTION
    The Input Manager that is responsible for monitoring messages sent from
    the various "input monitoring" tasks

NOTES
    The "input monitor" tasks are responsible for sending messages to the 
    "input manager" to inform of any input changes.
    
    The "input manager" provides a standard input interface to easily allow
    "input monitors" to interface with the application; user events should only
    ever be generated by the "input manager" and "input moitors" should only 
    ever generate messages to be interpreted by the "input manager"
*/

#ifndef _SINK_INPUT_MANAGER_H_
#define _SINK_INPUT_MANAGER_H_


/* Application includes */
#include "sink_states.h"

/* Firmware includes */
#include <message.h>


/*
    Defines the states lookup data type
*/
typedef struct
{
    sinkState   state;
    uint16      mask;
}statesLookup_t;


/*
    Definition of supported input monitor types
*/
typedef enum
{
    inputMonitorBLEHIDRemote = 0x1,     /* Monitors events sent by BLE HID Remote Controllers */
    inputMonitorIRRemote     = 0x2,     /* Monitors events sent by IR Remote Controllers */
    inputMonitorButton       = 0x4      /* Monitors events sent by Buttons (PIOs) [NOT YET SUPPORTED] */
} inputMonitorType_t;


/*
    Definition of supported input events
*/
typedef enum
{
    inputEventDown=0,            /* Input(s) have been detected as a button down */
    inputEventVShortRelease,     /* Input held and released before short timer fires */
    inputEventShortTimer,        /* Short timer fires whilst input is still pressed */
    inputEventShortRelease,      /* Input held and released after short timer has fired, but before long timer fires */
    inputEventLongTimer,         /* Long timer fires whilst input is still pressed */
    inputEventLongRelease,       /* Input held and released after long timer has fired, but before very long timer fires */
    inputEventVLongTimer,        /* Very Long timer fires whilst input is still pressed */
    inputEventVLongRelease,      /* Input held and released after very long timer has fired, but before very very long timer fires */
    inputEventVVLongTimer,       /* Very Very Long timer fires whilst input is still pressed */
    inputEventVVLongRelease,     /* Input held and released after very very long timer has fired */
    inputEventRepeatTimer        /* The input is still pressed and the repeat timer has fired */
} inputEvent_t;


/*
    Defines states allowed for an input (i.e. a button)
*/
typedef enum
{
    inputNotDown,       /* All Inputs are released */
    inputMultipleDetect,/* First input has been pressed and during this state, other buttons that are pressed can be detected as a multiple button press */
    inputDownVShort,    /* Input(s) is/are held down whilst SHORT timer is armed */
    inputDownShort,     /* Input(s) is/are held down after SHORT timer has fired and whilst LONG timer is armed */
    inputDownLong,      /* Input(s) is/are held down after LONG timer has fired and whilst VLONG timer is armed */
    inputDownVLong,     /* Input(s) is/are held down after VLONG timer has fired and whilst VVLONG timer is armed */
    inputDownVVLong     /* Input(s) is/are held down after VVLONG timer has fired */
} inputState_t;


/*
    Defines timers required for an input monitor
*/
typedef struct
{
    uint16  multipleDetectTimer;    /* Timer that is armed immediately  after the first input is pressed, once this timer fires, no further multiple buttons will be included in the "pattern" */
    uint16  shortTimer;             /* After a short duration, this timer will fire, input manager can assign events when short timer fires */
    uint16  longTimer;              /* After a long duration, this timer will fire, input manager can assign events when the timer fires */
    uint16  vLongTimer;             /* After a very long duration, this timer will fire, input manager can assign events when the timer fires */
    uint16  vvLongTimer;            /* After a very very long duration, this timer will fire, input manager can assign events when the timer fires */
    uint16  repeatTimer;            /* Every "repeatTimer" duration, this timer will fire, input manager can assign events on short timer firing, such as repeated volume events */
} timerConfig_t;


/*
    Lookup table for events; this is used by the "input manager" to generate events depending on messages sent from the "input monitors" 
*/
typedef struct
{
    uint16              mask;           /* Which Input(s) must be set to trigger the event */
    uint16              state_mask;     /* The application state(s) for which the event *user_event* will be valid */   
    inputEvent_t        input_event:8;  /* Which input event is required for the event to trigger */
    unsigned            user_event:8;   /* The Application User Event that will be triggered when the input event meets the required conditions (this is offset from EVENTS_USR_MESSAGE_BASE, (i.e. for EventUsrPowerOn, this value will be set to 1) */
} eventLookupTable_t;


/*
    Defines the layout of configuration data for an input monitor
*/
typedef struct
{
    timerConfig_t       input_timers;       /* Sub tasks "input monitors" must use these timers when detecting input events */
    eventLookupTable_t  lookup_table[1];    /* The lookup table used to convert input events to user events */
} inputMonitorConfig_t;


/*
    The input manager task data
*/
typedef struct
{
    uint16                  size_lookup_table;  /* The number of entries in the input monitor event lookup table */
    inputMonitorConfig_t    *config;            /* The user config data for the input manager */
    uint16                  down_mask;          /* If a remote control has generated a button press, store the mask of the down (to remember the held buttons down, will also block out new button presses from other input sources) */
    unsigned                ignore:1;           /* Flag set to ignore input events from any "input monitor" task whist another is active (i.e. whilst the VOL- button on a remote is held down, other events from other remotes will be ignored) */
    unsigned                reserved:15;
} inputManagerTaskData_t;


/****************************************************************************
NAME    
    notifyInputManager
    
DESCRIPTION
    Function for input monitor tasks to use to notify the input manager of 
    an event that has occured.
*/
void notifyInputManager( inputMonitorType_t monitor, inputEvent_t event, uint16 mask, uint16 id );


/****************************************************************************
NAME    
    inputManagerBusy
    
DESCRIPTION
    Function used to check whether or not the input manager is busy processing
    an input event.
*/
bool inputManagerBusy(void);


#endif /* _SINK_INPUT_MANAGER_H_ */
